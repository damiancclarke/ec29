#################################################################################################
# Author: Michel Szklo
# March 2021

# This script runs Sun & Abraham (2020) estimator for Bhalotra, Rocha, Soares (PSF article) 


#################################################################################################


# 0. Set-up
# =================================================================

rm(list=ls()) 

# packages
packages<-c('tidyverse','dplyr','tidyr',
            'scales','ggplot2','ggrepel','did',
            'installr','foreign', 'readstata13',
            'Rfast','dummies','gmodels','plm',
            'random','fastDummies','lfe',
            'multcomp')

to_install<-packages[!(packages %in% installed.packages()[,"Package"])]
if(length(to_install)>0) install.packages(to_install)

lapply(packages,require,character.only=TRUE)



setwd("C:/Users/Michel/Google Drive/DOUTORADO FGV/IEPS/PSF")
output <- "C:/Users/Michel/Google Drive/DOUTORADO FGV/IEPS/PSF/sun_abraham/"

# setting seed to be used on CS bootstrap
#random <- randomNumbers(n=1, min=100000, max=99999999, col = 1) / result: 14620281
set.seed(14620281)


# 1. Data input
# =================================================================

psf <- data.frame(read.dta13('base_final_AMC91.dta'))

df <- psf %>%
  filter(psf_AMCmiss!=1) %>% 
  mutate(effyear = ifelse(psf==0,2011,ano)) %>%
  group_by(codamc) %>% 
  mutate(effyear = min(effyear)) %>% 
  # mutate(effyear = ifelse(effyear==2011,0,effyear)) %>%
  ungroup() %>%
  filter(ano<=2004) %>% 
  mutate(rel_year = ano - effyear) %>% 
  dplyr::arrange(effyear,codamc,ano) %>% 
  # creating state-year variable for regression fixed effects
  mutate(uf_y_fe = as.factor(paste0(ano,"_",UF))) %>% 
  dplyr::select(effyear, ano, codamc, uf_y_fe, everything())

df2 <- psf %>%
  filter(psf_AMCmiss!=1) %>% 
  mutate(effyear = ifelse(psf==0,2011,ano)) %>%
  group_by(codamc) %>% 
  mutate(effyear = min(effyear)) %>% 
  # mutate(effyear = ifelse(effyear==2011,0,effyear)) %>%
  ungroup() %>%
  filter(ano>=1998 & ano<=2004) %>% 
  mutate(rel_year = ano - effyear) %>% 
  dplyr::arrange(effyear,codamc,ano) %>% 
  # creating state-year variable for regression fixed effects
  mutate(uf_y_fe = as.factor(paste0(ano,"_",UF))) %>% 
  dplyr::select(effyear, ano, codamc,uf_y_fe,everything())


# 2. Weights
# =================================================================

# percentage contribution to each lead/lag indicator by treatment cohort for weights

weights <- df %>% 
  # drop > 2005 adopters
  filter(effyear<2004) %>% 
  group_by(effyear,rel_year) %>% 
  count %>% 
  ungroup() %>% 
  group_by(rel_year) %>% 
  mutate(total = sum(n),
         perc = n / total) %>% 
  dplyr::select(rel_year, effyear, perc, n) %>% 
  ungroup() %>% 
  # get rid of negative numbers because glmt is weird
  mutate(rel_year2 = rel_year - min(rel_year)) %>%
  rowwise() %>% 
  # add variable equal to coefficient from regression
  mutate(term = paste0("cohort_", effyear, "_", rel_year2)) %>% 
  ungroup() %>%
  # dropping units that where already treated in the first period
  filter(effyear!=1996)


weights_att <- df %>% 
  # drop > 2005 adopters
  filter(effyear<2004) %>% 
  group_by(effyear,rel_year) %>% 
  count %>% 
  ungroup() %>%
  mutate(total = sum(n),
         perc = n / total) %>% 
  dplyr::select(rel_year, effyear, perc) %>% 
  ungroup() %>% 
  # get rid of negative numbers because glmt is weird
  mutate(rel_year2 = rel_year - min(rel_year)) %>%
  rowwise() %>% 
  # add variable equal to coefficient from regression
  mutate(term = paste0("cohort_", effyear, "_", rel_year2)) %>% 
  ungroup() %>%
  # dropping units that where already treated in the first period
  filter(effyear!=1996)



weights2 <- df2 %>% 
  # drop > 2005 adopters
  filter(effyear<2004) %>% 
  group_by(effyear,rel_year) %>% 
  count %>% 
  ungroup() %>% 
  group_by(rel_year) %>% 
  mutate(total = sum(n),
         perc = n / total) %>% 
  dplyr::select(rel_year, effyear, perc) %>% 
  ungroup() %>% 
  # get rid of negative numbers because glmt is weird
  mutate(rel_year2 = rel_year - min(rel_year)) %>%
  rowwise() %>% 
  # add variable equal to coefficient from regression
  mutate(term = paste0("cohort_", effyear, "_", rel_year2)) %>% 
  ungroup() %>%
  # dropping units that where already treated in the first period
  filter(effyear>1998)

weights2_att <- df2 %>% 
  # drop > 2005 adopters
  filter(effyear<2004) %>% 
  group_by(effyear,rel_year) %>% 
  count %>% 
  ungroup() %>%
  mutate(total = sum(n),
         perc = n / total) %>% 
  dplyr::select(rel_year, effyear, perc) %>% 
  ungroup() %>% 
  # get rid of negative numbers because glmt is weird
  mutate(rel_year2 = rel_year - min(rel_year)) %>%
  rowwise() %>% 
  # add variable equal to coefficient from regression
  mutate(term = paste0("cohort_", effyear, "_", rel_year2)) %>% 
  ungroup() %>%
  # dropping units that where already treated in the first period
  filter(effyear>1998)



# Number of obs in each relyear

treat_cohorts <- weights %>% 
  group_by(effyear) %>% 
  summarise(n=mean(n)) %>% 
  mutate(n=cumsum(n)) %>% 
  ungroup() %>% 
  rename(ano=effyear)


sample <- df %>% 
  # drop > 2005 adopters
  filter(effyear<2004) %>% 
  group_by(effyear,rel_year,ano) %>% 
  count %>% 
  ungroup() %>% 
  group_by(rel_year) %>% 
  mutate(total = sum(n),
         perc = n / total) %>% 
  dplyr::select(rel_year, effyear, perc, n, ano) %>% 
  ungroup() %>% 
  # get rid of negative numbers because glmt is weird
  mutate(rel_year2 = rel_year - min(rel_year)) %>%
  rowwise() %>% 
  # add variable equal to coefficient from regression
  mutate(term = paste0("cohort_", effyear, "_", rel_year2)) %>% 
  ungroup() %>%
  # dropping units that where already treated in the first period
  filter(effyear!=1996) %>%
  left_join(treat_cohorts, by = "ano") %>% 
  mutate(n.y = ifelse(is.na(n.y),0,n.y)) 

relyear_sample <- sample %>% 
  group_by(rel_year) %>% 
  summarise(n.x = sum(n.x),
            n.y = max(n.y)) %>% 
  mutate(n.y = 3973-n.y) %>% 
  mutate(n.y = ifelse(rel_year==7,3973-3341,n.y))
  

relyear_plot <- relyear_sample %>%
  rename(treatment = n.x,
         control = n.y) %>% 
  pivot_longer(cols = c("treatment","control"),
               names_to = "group",
               values_to = "Number of AMCs")
  

# graph
plot <- relyear_plot %>% 
  rename("Years since PSF implementation" = "rel_year") %>% 
  ggplot(aes(y=`Number of AMCs`,x=`Years since PSF implementation`, group = group)) + 
  geom_vline(xintercept = 0, color = "#9e9d9d", size = 0.35, alpha = 1, linetype = "dotted") +
  geom_line() +
  scale_x_continuous(breaks = seq(-8,8,1), limits = c(-8,8)) +
  scale_y_continuous(breaks = seq(0,4000,250), limits = c(0,4000)) +
  theme_light() +
  labs(title = "Treatment and Control AMCs by relative year since PSF implementation") +
  theme(panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(),
        plot.title = element_text(size = 10, face = "bold"),
        axis.title = element_text(size=10),
        legend.position="bottom", legend.box = "horizontal",
        legend.text = element_text(size = 8))

filePNG <- paste0("treated_obs.png")
ggsave(filePNG,
       plot = plot,
       device = "png",
       width = 8, height = 5,
       units = "in")


# 3. Data adjustment for regression
# =================================================================

# dataframe
df_reg <- df %>% 
  # replace rel_year = NA if last treated group
  mutate(rel_year2 = ifelse(effyear>=2004,as.numeric(NA),rel_year),
         rel_year2 = rel_year2 - min(rel_year2,na.rm = T)) %>%
  # make a variable that is the interaction of group and relative year
  rowwise() %>% 
  mutate(cohort = ifelse(effyear>=2004, as.character(NA),paste0(effyear,"_",rel_year2))) %>% 
  ungroup() %>% 
  dummy_cols(select_columns = "cohort", ignore_na = TRUE) %>% 
  mutate_at(vars(starts_with("cohort_")), ~replace_na(., 0)) %>% 
  dplyr::select(effyear, ano, codamc,uf_y_fe, cohort, everything()) %>%
  # dropping units that where already treated in the first period
  filter(effyear!=1996)

# treatment variables
treatment <- weights %>% filter(rel_year != -1 & rel_year > min(rel_year)) %>% pull(term)

# dataframe
df2_reg <- df2 %>% 
  # replace rel_year = NA if last treated group
  mutate(rel_year2 = ifelse(effyear>=2004,as.numeric(NA),rel_year),
         rel_year2 = rel_year2 - min(rel_year2,na.rm = T)) %>%
  # make a variable that is the interaction of group and relative year
  mutate(cohort = ifelse(effyear>=2004, as.character(NA),paste0(effyear,"_",rel_year2))) %>% 
  ungroup() %>% 
  dummy_cols(select_columns = "cohort", ignore_na = TRUE) %>% 
  mutate_at(vars(starts_with("cohort_")), ~replace_na(., 0)) %>% 
  dplyr::select(effyear, ano, codamc,uf_y_fe, cohort, everything()) %>%
  # dropping units that where already treated in the first period
  filter(effyear>1998)

# treatment variables
treatment2 <- weights2 %>% filter(rel_year != -1 & rel_year > min(rel_year)) %>% pull(term)



# 4. Specifications
# =================================================================

# Spec b
#-------
weight_b <- df_reg$peso_b
weight2_b <- df2_reg$peso_b
cov_b <- c("hospital","pbf_pc","psf_int")


# Spec c
#-------
weight_c <- df_reg$peso_m
weight2_c <- df2_reg$peso_m
cov_c <- c("pbf_pc","psf_int")


# Spec m
#-------
weight_m <- df_reg$peso_m
weight2_m <- df2_reg$peso_m
cov_m <- c("hospital","pbf_pc")



# Spec t
#-------
weight_t <- df_reg$peso_tot
cov_t <- c("pbf_pc","psf_int")
weight2_t <- df2_reg$peso_tot


weight_no <- seq(from = 1, by = 0, length.out = 36459)

# 5. Outcomes list
# =================================================================

# Reestructuring
psf <- c("psf_popcover","psf_teams_pc") # spec_c ano>=1998  ******************
infra <- c("hospital","leitos_pc") # spec_c
spending <- c("l_desp_corrente_net_pc","l_desp_saude_sb_pc") # spec_t
amb <- c("sia_tot_pc","sia_domicsup_pc","sia_educ_pc","ncnes_psf_pc", # spec_t
         "ncnes_pediat_pc","ncnes_ginobs_pc")

# Access
access <- c("birth_prenatal_7plus")  #spec_c
hosp_m <- c("r_mat_hospit_nondel_pc","r_mat_hospit_del_pc") # spec_m ano>=1998  ******************
hosp_i <- c("r_baby_hospt_pc") # spec_b ano>=1998  ******************

# Female Mortality
fmr <- c("r_mat_death_all_pc") # spec_m

# Infant Mortality
imr <- c("r_baby_death_pc") # spec_b
imr_time <- c("r_baby_death_fetal_pc","r_baby_neonatal_pc","r_baby_death_24hs_pc",
              "r_baby_death_27days_pc","r_baby_death_year_pc")
imr_cause <- c("r_baby_death_infectious_pc","r_baby_death_respiratory_pc",
               "r_baby_death_perinatal_pc","r_baby_death_congenital_pc",
               "r_baby_death_external_pc","r_baby_death_nutrition_pc") # spec_b

# Fertility
fertility <- c("ln_births") #spec_b


# 6. Regression and output function
# =================================================================

sa <- function(df,treatment, var, covs, weights_catt, weights_att,regweight,lags, leads){
  
  spec <- paste(paste(treatment,collapse = "+"),"+",paste(covs,collapse = "+"))
  
  # Dynamic treatment effects
  # ---------------------------------
  
  fit <- felm(as.formula(paste(var," ~ ", spec, "| codamc + uf_y_fe | 0 | codamc")), 
              data = df, exactDOF = TRUE, weights = regweight)
  
  coefs <- fit$coefficients %>%
    # add in coefficient name to tibble
    as_tibble(rownames = "term") %>% 
    # bring in weights
    left_join(., weights_catt)
  
  # function to aggregate group-time coefficients into leads and lags
  get_lincom <- function(ll) {
    # get just the coefficients for a specific lead lag
    cf2 <- coefs %>% dplyr::filter(rel_year == ll)
    # paste the function that goes into the linear combination function
    F <- paste(paste(cf2$perc, cf2$term, sep = " * ", collapse = " + "), " = 0")
    # take linear combination and put into a data frame
    broom::tidy(
      confint(glht(fit, linfct = F)),
      conf.int = TRUE
    ) %>% mutate(rel_year = ll)
  }
  
  # run over all lead/lags
  out <- map_df(c(-lags:-2, 0:leads), get_lincom) %>% 
    # add time variable
    mutate(t = c(-lags:-2, 0:leads)) %>% 
    bind_rows(tibble(t = -1, estimate = 0, 
                     conf.low = 0, conf.high = 0)) %>% 
    dplyr::arrange(t) %>% 
    dplyr::select(-c("contrast","rel_year"))
  
  colnames(out) <- c("b","lb","ub","t")
  
  saveRDS(out,paste0("sun_abraham/output/",var,".rds"))
  
  
  # Average treatment
  # ---------------------------------
  
  coefs_att <- fit$coefficients %>%
    # add in coefficient name to tibble
    as_tibble(rownames = "term") %>% 
    # bring in weights
    left_join(., weights_att)
  
  get_lincom_att <- function(lg, ld) {
    # get the coefficients for all leads and lags
    cf2 <- coefs_att %>% dplyr::filter(rel_year>= lg & rel_year<=ld)
    # paste the function that goes into the linear combination function
    F <- paste(paste(cf2$perc, cf2$term, sep = " * ", collapse = " + "), " = 0")
    # take linear combination and put into a data frame
    broom::tidy(
      confint(glht(fit, linfct = F)),
      conf.int = TRUE
    )
  }
  
  out_att <- get_lincom_att(-lags,leads) %>% 
    dplyr::select(-contrast)
  colnames(out_att) <- c("b","lb","ub")
  saveRDS(out_att,paste0("sun_abraham/output/",var,"_att.rds"))
  
  
  # graph
  
  
  graph <- out %>%
    ggplot(aes(x=t,y=b)) +
    geom_point() +
    geom_errorbar(aes(ymin = lb,
                      ymax = ub))
  
  ggsave(paste0("sun_abraham/output/",var,".png"),
         plot = graph,
         device = "png",
         width = 8, height = 5,
         units = "in")
  
}





# 7. Reestructuring
# =================================================================

for (i in psf){
  sa(df2_reg,treatment2,i,cov_c,weights2,weights2_att,weight2_c,4,5)
  print(paste0("Estimate of SA Event Study Regression for --",i,"-- saved"))
}

for (i in infra){
  sa(df_reg,treatment,i,cov_c,weights,weights_att,weight_c,6,7)
  print(paste0("Estimate of SA Event Study Regression for --",i,"-- saved"))
}

for (i in spending){
  sa(df_reg,treatment,i,cov_t,weights,weights_att,weight_t,6,7)
  print(paste0("Estimate of SA Event Study Regression for --",i,"-- saved"))
}

for (i in amb){
  sa(df_reg,treatment,i,cov_t,weights,weights_att,weight_t,6,7)
  print(paste0("Estimate of SA Event Study Regression for --",i,"-- saved"))
}


# 8. Access
# =================================================================
for (i in access){
  sa(df_reg,treatment,i,cov_c,weights,weights_att,weight_c,6,7)
  print(paste0("Estimate of SA Event Study Regression for --",i,"-- saved"))
}

for (i in hosp_m){
  sa(df2_reg,treatment2,i,cov_m,weights2,weights2_att,weight2_m,4,5)
  print(paste0("Estimate of SA Event Study Regression for --",i,"-- saved"))
}

for (i in hosp_i){
  sa(df2_reg,treatment2,i,cov_b,weights2,weights2_att,weight2_b,4,5)
  print(paste0("Estimate of SA Event Study Regression for --",i,"-- saved"))
}


# 9. Female Mortality
# =================================================================
for (i in fmr){
  sa(df_reg,treatment,i,cov_m,weights,weights_att,weight_m,6,7)
  print(paste0("Estimate of SA Event Study Regression for --",i,"-- saved"))
}



# 10. Infant Mortality
# =================================================================
for (i in imr){
  sa(df_reg,treatment,i,cov_b,weights,weights_att,weight_b,6,7)
  print(paste0("Estimate of SA Event Study Regression for --",i,"-- saved"))
}

for (i in imr_time){
  sa(df_reg,treatment,i,cov_b,weights,weights_att,weight_b,6,7)
  print(paste0("Estimate of SA Event Study Regression for --",i,"-- saved"))
}

for (i in imr_cause){
  sa(df_reg,treatment,i,cov_b,weights,weights_att,weight_b,6,7)
  print(paste0("Estimate of SA Event Study Regression for --",i,"-- saved"))
}


# 11. Fertility
# =================================================================

for (i in fertility){
  sa(df_reg,treatment,i,cov_b,weights,weights_att,weight_b,6,7)
  print(paste0("Estimate of SA Event Study Regression for --",i,"-- saved"))
}


